/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplenetworkinterface;

import java.io.IOException;
import java.net.InetAddress;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Grady
 */
public class GetIPPort extends javax.swing.JFrame {
    public InetAddress IP;
    public int Port;
    public boolean initialized = false;
    public boolean exit = false;
    /**
     * Creates new form GetIPPort
     */
    public GetIPPort() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpField = new javax.swing.JTextField();
        GetIP = new javax.swing.JTextField();
        HelpField2 = new javax.swing.JTextField();
        getPort = new javax.swing.JTextField();
        Enter = new javax.swing.JToggleButton();
        Cancel = new javax.swing.JToggleButton();
        ErrorField = new javax.swing.JTextField();
        Enter_Bypass = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        helpField.setEditable(false);
        helpField.setText("Enter the Raspberry Pi's IP or Hostname");

        GetIP.setText("raspberrypi");
        GetIP.setNextFocusableComponent(getPort);

        HelpField2.setEditable(false);
        HelpField2.setText("Enter the programs bound port num");

        getPort.setText("4000");
        getPort.setNextFocusableComponent(Enter);
        getPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPortActionPerformed(evt);
            }
        });

        Enter.setText("Enter");
        Enter.setNextFocusableComponent(Cancel);
        Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        ErrorField.setEditable(false);

        Enter_Bypass.setText("Enter {Bypass}");
        Enter_Bypass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Enter_BypassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ErrorField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Enter)
                        .addGap(55, 55, 55)
                        .addComponent(Enter_Bypass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Cancel))
                    .addComponent(getPort)
                    .addComponent(HelpField2)
                    .addComponent(GetIP)
                    .addComponent(helpField, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GetIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HelpField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getPort, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Enter)
                    .addComponent(Cancel)
                    .addComponent(Enter_Bypass))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void disableAll(){
        GetIP.setEditable(false);
        getPort.setEditable(false);
        Enter.setEnabled(false);
        Cancel.setEnabled(false);
        Enter_Bypass.setEnabled(false);
    }
    
    public void enableAll(){
        GetIP.setEditable(true);
        getPort.setEditable(true);
        Enter.setEnabled(true);
        Cancel.setEnabled(true);
        Enter_Bypass.setEnabled(true);
    }
    
    
    private void EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterActionPerformed
        boolean bool = true;
        Thread ct = new Thread(new Runnable() {
            @Override
            public void run() {
                disableAll();
                initialized=connect();
                if(initialized==false){
                    ErrorField.setText("Failed to connect!");
                } 
                enableAll();
            }
        });
        try {
            IP = InetAddress.getByName(GetIP.getText());
        } catch (Exception e) {
            ErrorField.setText("Invalid IP/Host name. Example '192.168.1.103' or 'raspberrypi'");
            bool = false;
        }
        Port = Integer.parseInt(getPort.getText());
        if(Port>65535 || Port<0){
            Port = 4000;
            bool = false;
            ErrorField.setText("Invalid Port num. Port is a num from 0 to 65535");
        }
        if(bool){
            if(ct.isAlive()==false){
                ct.start();    
            }
        }
              
    }//GEN-LAST:event_EnterActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        exit = true;
        initialized = true;
        
    }//GEN-LAST:event_CancelActionPerformed

    private void getPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getPortActionPerformed

    private void Enter_BypassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Enter_BypassActionPerformed
        disableAll();
        boolean bool = true;
        try {
            IP = InetAddress.getByName(GetIP.getText());
        } catch (Exception e) {
            ErrorField.setText("Invalid IP/Host name. Example '192.168.1.103' or 'raspberrypi'");
            bool = false;
        }
        Port = Integer.parseInt(getPort.getText());
        if(Port>65535 || Port<0){
            Port = 4000;
            bool = false;
            ErrorField.setText("Invalid Port num. Port is a num from 0 to 65535");
        }
        enableAll();
        initialized = bool;
    }//GEN-LAST:event_Enter_BypassActionPerformed

    boolean connect(){
        String str;
        int timeoutMills = 1000;
        //int times = 0;
        easySocket server = new easySocket();
            try {
                
                server.setup(Port, IP, Port);
                //System.out.println("Connecting..."+IP+":"+Port);
                for(int i=0,times=1;i<6;++i,times++){
                    // [control connection robot]
                    // ? unknown status
                    // # control/robot is here
                    // * telling connection locked (basically will not act on any data from any other IP)
                    // ~ I recived you (This is for somewhat mundane data confirmation)
                    server.send("[#-?]");
                    ErrorField.setText("Connecting...."+times);
                    if("[#-#]".equals(server.read(timeoutMills))){
                        ErrorField.setText("Connecting.... Done");
                        //System.out.println("Done");
                        for(int x=0,times2=1;x<6;x++,times2++){
                            server.send("[*-#]");
                            //System.out.println("Locking...");
                            ErrorField.setText("Locking...."+times2);
                            if("[*-*]".equals(server.read(timeoutMills))){
                                ErrorField.setText("Locking.... Done");
                                server.send("[~]");
                                server.send("[~]");
                                server.send("[~]");                             
                                //System.out.println("Done");
                                server.close();
                                ErrorField.setText("Connected");
                                return true;
                            }
                        }
                    }
                }
                //System.out.println("Connected And locked in");
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            server.close();
            return false;
        }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetIPPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetIPPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetIPPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetIPPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GetIPPort().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Cancel;
    private javax.swing.JToggleButton Enter;
    private javax.swing.JButton Enter_Bypass;
    private javax.swing.JTextField ErrorField;
    private javax.swing.JTextField GetIP;
    private javax.swing.JTextField HelpField2;
    private javax.swing.JTextField getPort;
    private javax.swing.JTextField helpField;
    // End of variables declaration//GEN-END:variables
}
